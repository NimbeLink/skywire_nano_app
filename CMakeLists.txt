###
 # \file
 #
 # \brief Builds the Skywire Nano application
 #
 # (C) NimbeLink Corp. 2020
 #
 # All rights reserved except as explicitly granted in the license agreement
 # between NimbeLink Corp. and the designated licensee.  No other use or
 # disclosure of this software is permitted. Portions of this software may be
 # subject to third party license terms as specified in this software, and such
 # portions are excluded from the preceding copyright notice of NimbeLink Corp.
 ##

cmake_minimum_required(VERSION 3.8.2)

set(PROJECT_ROOT        "${CMAKE_CURRENT_LIST_DIR}")
set(REPOSITORY_ROOT     "${PROJECT_ROOT}/..")
set(NANO_SDK_ROOT       "${REPOSITORY_ROOT}/skywire_nano_sdk/")

################################################################
#
# Toolchain
#
################################################################

# Set up the location of the toolchain for Zephyr
set(ENV{ZEPHYR_TOOLCHAIN_VARIANT}   gnuarmemb)
set(ENV{GNUARMEMB_TOOLCHAIN_PATH}   ${REPOSITORY_ROOT}/toolchain)

################################################################
#
# Boards
#
################################################################

# Set up the location of our custom boards
set(DTS_ROOT        ${NANO_SDK_ROOT})
set(BOARD_ROOT      ${NANO_SDK_ROOT})
set(BOARD           skywire_nano_app)

################################################################
#
# Environment
#
################################################################

include(${REPOSITORY_ROOT}/nrf/cmake/boilerplate.cmake)
include(${REPOSITORY_ROOT}/zephyr/cmake/app/boilerplate.cmake NO_POLICY_SCOPE)
project(app)

################################################################
#
# Application
#
################################################################

# Add in our examples
add_subdirectory(examples/)

# Add our own source
FILE(
    GLOB_RECURSE
    newSources
    ABSOLUTE
        "${PROJECT_ROOT}/src/*.c"
        "${PROJECT_ROOT}/src/*.cpp"
)

list(APPEND sources ${newSources})

# Add the sources to our target
target_sources(app PRIVATE ${sources})

zephyr_include_directories(
    kernel/include
    ${ARCH_DIR}/${ARCH}/include
    ${PROJECT_ROOT}
    ${NANO_SDK_ROOT}/src
    ${PROJECT_BINARY_DIR}
)

################################################################
#
# DFU
#
################################################################

# Note our starting points, which are generated by our build system
set(unsignedAppHex ${PROJECT_BINARY_DIR}/zephyr/zephyr.hex)
set(unsignedAppBin ${PROJECT_BINARY_DIR}/zephyr/zephyr.bin)

# Sign the HEX output for the sake of manually flashing a device
set(signedAppHex ${PROJECT_BINARY_DIR}/zephyr/app_signed.hex)

# Sign the BIN output for a signed update file
set(signedAppBin ${PROJECT_BINARY_DIR}/zephyr/app_signed_update.bin)

# Make a target for signing our app HEX file and signing our app BIN file
add_custom_target(
    generateAdditionalBinaries
    ALL
    DEPENDS
        "${unsignedAppHex}"
        "${unsignedAppBin}"
    BYPRODUCTS
        "${signedAppHex}"
        "${signedAppBin}"

    COMMAND
        python ${REPOSITORY_ROOT}/mcuboot/scripts/imgtool.py
        sign
        --key "${PROJECT_ROOT}/test_sign.pem"
        --header-size ${CONFIG_TEXT_SECTION_OFFSET}
        --align ${CONFIG_DT_FLASH_WRITE_BLOCK_SIZE}
        --slot-size ${CONFIG_FLASH_LOAD_SIZE}
        --version "1.0.0"
        "${unsignedAppHex}"
        "${signedAppHex}"

    COMMAND
        python ${REPOSITORY_ROOT}/mcuboot/scripts/imgtool.py
        sign
        --key "${PROJECT_ROOT}/test_sign.pem"
        --header-size ${CONFIG_TEXT_SECTION_OFFSET}
        --align ${CONFIG_DT_FLASH_WRITE_BLOCK_SIZE}
        --pad
        --slot-size ${CONFIG_FLASH_LOAD_SIZE}
        --version "1.0.0"
        "${unsignedAppBin}"
        "${signedAppBin}"

    COMMAND
        west skywire format
        --input="${signedAppBin}"
        --type="application"
        --output-file="${signedAppBin}"
)

add_custom_target(
    additionalAppTargets

    DEPENDS
        ${signedAppHex}
        ${signedAppBin}

    additionalAppTargetOutputs
)
